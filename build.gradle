buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        classpath 'com.android.tools.build:gradle:3.0.1'
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

configure(subprojects - project(':android')) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    sourceCompatibility = 1.6
    apply plugin: "idea"
    idea {
        module {
            scopes.PROVIDED.minus += [configurations.compile]
            scopes.COMPILE.plus += [configurations.compile]
        }
    }

    jacoco {
        toolVersion = "0.7.9"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    task codeCoverageReport(type: JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        subprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination "${buildDir}/reports/jacoco/report.xml"
            html.enabled false
            csv.enabled false
        }
    }

    codeCoverageReport.dependsOn {
        subprojects*.test
    }

    test {
        // enable TestNG support (default is JUnit)
        useTestNG()

        // set a system property for the test JVM(s)
        systemProperty 'some.prop', 'value'

        // explicitly include or exclude tests
        include 'org/foo/**'
        exclude 'org/boo/**'

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }
}

subprojects {
    version = '0.0.1-SNAPSHOT'
    ext.appName = 'Adventure Emulation'
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

// Clearing Eclipse project data in root folder:
tasks.eclipse.doLast {
    delete '.project'
    delete '.classpath'
    delete '.settings/'
}
